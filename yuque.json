[
  {
    "id": 3015181,
    "slug": "oev5yg",
    "title": "vue 基础知识学习",
    "book_id": 533843,
    "book": {
      "id": 533843,
      "type": "Book",
      "slug": "fzvu63",
      "name": "hexo",
      "user_id": 319940,
      "description": "hexo",
      "creator_id": 319940,
      "public": 1,
      "items_count": 1,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-10-30T02:47:10.970Z",
      "updated_at": "2019-10-30T02:47:10.000Z",
      "created_at": "2019-10-30T02:42:12.000Z",
      "namespace": "lanyincao/fzvu63",
      "user": {
        "id": 319940,
        "type": "User",
        "login": "lanyincao",
        "name": "蓝银草",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg",
        "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 3,
        "public_books_count": 2,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2019-04-16T09:30:45.000Z",
        "updated_at": "2019-10-30T02:42:55.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 319940,
    "creator": {
      "id": 319940,
      "type": "User",
      "login": "lanyincao",
      "name": "蓝银草",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg",
      "large_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1555407014552-5ad4944f-8417-47e1-a0f0-f02e09148566.jpeg?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 3,
      "public_books_count": 2,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2019-04-16T09:30:45.000Z",
      "updated_at": "2019-10-30T02:42:55.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n1.MVC和MVVM 的区别？<br />\n<br />![截图.png](https://cdn.nlark.com/yuque/0/2019/png/319940/1572403509120-1f91fad6-e14b-4d75-96cc-6f29f8ec9b45.png#align=left&display=inline&height=637&name=%E6%88%AA%E5%9B%BE.png&originHeight=637&originWidth=1545&search=&size=683817&status=done&width=1545)<br />2.学习了vue中最基本代码结构<br />\n<br />![截图 (1).png](https://cdn.nlark.com/yuque/0/2019/png/319940/1572403517442-7e3fb6dc-8400-452d-96b7-81a581c12c24.png#align=left&display=inline&height=732&name=%E6%88%AA%E5%9B%BE%20%281%29.png&originHeight=732&originWidth=1129&search=&size=264047&status=done&width=1129)<br />\n<br />3.插值表达式  v-cloak  v-text  v-html  v-bind(缩写是 ： )  v-on(缩写是 @)  v-model  v-for  v-if  v-show<br />v-cloak ：可以解决 插值表达式闪烁问题；<br />v-text   ：默认 v-text 是没有闪烁问题的，v-text 会覆盖元素中原本的内容，但是  插值表达式  只会替换自己的这个占位符，不会把整个元素的内容清空<br />v-html  ：<br />v-bind  ：简写“：”，绑定属性，可以写合法的表达式<br />v-on    ：简写“@” ，绑定事件<br />\n<br />4.事件修饰符   .stop  .prevent  .captrue  .self  .once<br />.stop：阻止冒泡<br />.prevent：阻止默认事件<br />.captrue：添加时间侦听器时使用事件捕获模式<br />.self：只当事件在该元素本身（比如不是子元素）触发时触发回调<br />.one：事件只触发一次<br />.stop和.self区别？<br />.self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡行为<br />\n<br />5.el ：指定眼控制的区域  data ：是个对象，指定了控制的区域内要用到的数据  methods 虽然带个后缀，但是是个对象，这里可以自定义了方法<br />6.在vm实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法，必须带this<br />7.在v-for 要会使用key 属性 （只接受 string / number）<br />8.v-model 只能应用于表单元素<br />9.在vue中绑定样式两种方式  v-bing：class  v-bind：style<br />class：<br />1.第一种方式，直接传递一个数组，注意这里 class 需要使用  v-bind  做数据绑定<br />2.第二种方式，在数组中使用三元表达式，提高代码的可读性 例如： ：class=“[ 'aa','bb',flag?'cc':'' ]”   (flag是true或者false)<br />3.第三种方式，在数组中使用 对象来代替三元表达式，提高代码的可读性  例如：  ：class=“[ 'aa','bb',{‘cc’：flag } ]”<br />4.第四种方式，直接使用对象  例如： ：class=\"{‘aa’:flag,active\":true}“<br />style：<br />1.第一种方式，直接在元素上通过：style的形式，书写样式对象  ：style=“{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}”<br />2.第二种方式，将样式对象，定义到data中，并直接引入到：style中  ：style=“dataStyle”  dataStyle：{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}<br />3.第三种方式，在：style中通过数组，引入多个data上的样式对象 ：style=“[dataStyle,dataStype2]”<br />10.v-for<br />1.迭代数组<br />2.迭代对象中的属性<br />3.迭代数字<br />v-if 和 v-show的区别？<br />v-if 的特点：每次都会重新删除或创建元素。<br />v-show  的特点：每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none 样式<br />应用场景：<br />如果元素涉及到频繁的切换，最好不要使用v-if，而是推荐使用 v-show;<br />如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if;\n",
    "body_draft": "\n1.MVC和MVVM 的区别？<br />\n<br />![截图.png](https://cdn.nlark.com/yuque/0/2019/png/319940/1572403509120-1f91fad6-e14b-4d75-96cc-6f29f8ec9b45.png#align=left&display=inline&height=637&name=%E6%88%AA%E5%9B%BE.png&originHeight=637&originWidth=1545&search=&size=683817&status=done&width=1545)<br />2.学习了vue中最基本代码结构<br />\n<br />![截图 (1).png](https://cdn.nlark.com/yuque/0/2019/png/319940/1572403517442-7e3fb6dc-8400-452d-96b7-81a581c12c24.png#align=left&display=inline&height=732&name=%E6%88%AA%E5%9B%BE%20%281%29.png&originHeight=732&originWidth=1129&search=&size=264047&status=done&width=1129)<br />\n<br />3.插值表达式  v-cloak  v-text  v-html  v-bind(缩写是 ： )  v-on(缩写是 @)  v-model  v-for  v-if  v-show<br />v-cloak ：可以解决 插值表达式闪烁问题；<br />v-text   ：默认 v-text 是没有闪烁问题的，v-text 会覆盖元素中原本的内容，但是  插值表达式  只会替换自己的这个占位符，不会把整个元素的内容清空<br />v-html  ：<br />v-bind  ：简写“：”，绑定属性，可以写合法的表达式<br />v-on    ：简写“@” ，绑定事件<br />\n<br />4.事件修饰符   .stop  .prevent  .captrue  .self  .once<br />.stop：阻止冒泡<br />.prevent：阻止默认事件<br />.captrue：添加时间侦听器时使用事件捕获模式<br />.self：只当事件在该元素本身（比如不是子元素）触发时触发回调<br />.one：事件只触发一次<br />.stop和.self区别？<br />.self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡行为<br />\n<br />5.el ：指定眼控制的区域  data ：是个对象，指定了控制的区域内要用到的数据  methods 虽然带个后缀，但是是个对象，这里可以自定义了方法<br />6.在vm实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法，必须带this<br />7.在v-for 要会使用key 属性 （只接受 string / number）<br />8.v-model 只能应用于表单元素<br />9.在vue中绑定样式两种方式  v-bing：class  v-bind：style<br />class：<br />1.第一种方式，直接传递一个数组，注意这里 class 需要使用  v-bind  做数据绑定<br />2.第二种方式，在数组中使用三元表达式，提高代码的可读性 例如： ：class=“[ 'aa','bb',flag?'cc':'' ]”   (flag是true或者false)<br />3.第三种方式，在数组中使用 对象来代替三元表达式，提高代码的可读性  例如：  ：class=“[ 'aa','bb',{‘cc’：flag } ]”<br />4.第四种方式，直接使用对象  例如： ：class=\"{‘aa’:flag,active\":true}“<br />style：<br />1.第一种方式，直接在元素上通过：style的形式，书写样式对象  ：style=“{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}”<br />2.第二种方式，将样式对象，定义到data中，并直接引入到：style中  ：style=“dataStyle”  dataStyle：{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}<br />3.第三种方式，在：style中通过数组，引入多个data上的样式对象 ：style=“[dataStyle,dataStype2]”<br />10.v-for<br />1.迭代数组<br />2.迭代对象中的属性<br />3.迭代数字<br />v-if 和 v-show的区别？<br />v-if 的特点：每次都会重新删除或创建元素。<br />v-show  的特点：每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none 样式<br />应用场景：<br />如果元素涉及到频繁的切换，最好不要使用v-if，而是推荐使用 v-show;<br />如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if;\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine\" data-lake-element=\"root\" data-selection-319940=\"%7B%22path%22%3A%5B%5B42%2C0%2C0%2C17%5D%2C%5B42%2C0%2C0%2C17%5D%5D%2C%22uuid%22%3A%22319940%22%2C%22active%22%3Atrue%7D\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.MVC和MVVM 的区别？</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/319940/1572403509120-1f91fad6-e14b-4d75-96cc-6f29f8ec9b45.png?x-oss-process=image/resize,w_1500\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/319940/1572403509120-1f91fad6-e14b-4d75-96cc-6f29f8ec9b45.png\" class=\"image lake-drag-image\" alt=\"截图.png\" title=\"截图.png\" style=\"visibility: visible; width: 746px; height: 308px;\"></span></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.学习了vue中最基本代码结构</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/319940/1572403517442-7e3fb6dc-8400-452d-96b7-81a581c12c24.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/319940/1572403517442-7e3fb6dc-8400-452d-96b7-81a581c12c24.png\" class=\"image lake-drag-image\" alt=\"截图 (1).png\" title=\"截图 (1).png\" style=\"visibility: visible; width: 746px; height: 484px;\"></span></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3.插值表达式  v-cloak  v-text  v-html  v-bind(缩写是 ： )  v-on(缩写是 @)  v-model  v-for  v-if  v-show</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">v-cloak ：可以解决 插值表达式闪烁问题；</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">v-text   ：默认 v-text 是没有闪烁问题的，v-text 会覆盖元素中原本的内容，但是  插值表达式  只会替换自己的这个占位符，不会把整个元素的内容清空</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">v-html  ：</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">v-bind  ：简写“：”，绑定属性，可以写合法的表达式</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">v-on    ：简写“@” ，绑定事件</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">4.事件修饰符   .stop  .prevent  .captrue  .self  .once</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">.stop：阻止冒泡</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">.prevent：阻止默认事件</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">.captrue：添加时间侦听器时使用事件捕获模式</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">.self：只当事件在该元素本身（比如不是子元素）触发时触发回调</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">.one：事件只触发一次</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">.stop和.self区别？</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span style=\"color: #C24F4A;\">.self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡行为</span></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">5.el ：指定眼控制的区域  data ：是个对象，指定了控制的区域内要用到的数据  methods 虽然带个后缀，但是是个对象，这里可以自定义了方法</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">6.在vm实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法，必须带this</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">7.在v-for 要会使用key 属性 （只接受 string / number）</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">8.v-model 只能应用于表单元素</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">9.在vue中绑定样式两种方式  v-bing：class  v-bind：style</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">class：</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.第一种方式，直接传递一个数组，注意这里 class 需要使用  v-bind  做数据绑定</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.第二种方式，在数组中使用三元表达式，提高代码的可读性 例如： ：class=“[ 'aa','bb',flag?'cc':'' ]”   (flag是true或者false)</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3.第三种方式，在数组中使用 对象来代替三元表达式，提高代码的可读性  例如：  ：class=“[ 'aa','bb',{‘cc’：flag } ]”</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">4.第四种方式，直接使用对象  例如： ：class=\"{‘aa’:flag,active\":true}“</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">style：</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.第一种方式，直接在元素上通过：style的形式，书写样式对象  ：style=“{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}”</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.第二种方式，将样式对象，定义到data中，并直接引入到：style中  ：style=“dataStyle”  dataStyle：{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3.第三种方式，在：style中通过数组，引入多个data上的样式对象 ：style=“[dataStyle,dataStype2]”</p><p style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">10.v-for</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1.迭代数组</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2.迭代对象中的属性</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3.迭代数字</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px; line-height: 24px;\">v-if 和 v-show的区别？</span></p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">v-if 的特点：每次都会重新删除或创建元素。</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">v-show  的特点：每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none 样式</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">应用场景：</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果元素涉及到频繁的切换，最好不要使用v-if，而是推荐使用 v-show;</p><p style=\"text-align: left; text-indent: 2em; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if;</p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><p><br /></p><p style=\"text-align: left;\">1.MVC和MVVM 的区别？</p><p style=\"text-align: left;\"><br /></p><p style=\"text-align: left;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F319940%2F1572403509120-1f91fad6-e14b-4d75-96cc-6f29f8ec9b45.png%22%2C%22originWidth%22%3A1545%2C%22originHeight%22%3A637%2C%22name%22%3A%22%E6%88%AA%E5%9B%BE.png%22%2C%22size%22%3A683817%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22search%22%3A%22%22%2C%22width%22%3A1545%2C%22height%22%3A637%7D\"></card></p><p style=\"text-align: left;\">2.学习了vue中最基本代码结构</p><p style=\"text-align: left;\"><br /></p><p style=\"text-align: left;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F319940%2F1572403517442-7e3fb6dc-8400-452d-96b7-81a581c12c24.png%22%2C%22originWidth%22%3A1129%2C%22originHeight%22%3A732%2C%22name%22%3A%22%E6%88%AA%E5%9B%BE%20(1).png%22%2C%22size%22%3A264047%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22search%22%3A%22%22%2C%22width%22%3A1129%2C%22height%22%3A732%7D\"></card></p><p style=\"text-align: left;\"><br /></p><p style=\"text-align: left;\">3.插值表达式  v-cloak  v-text  v-html  v-bind(缩写是 ： )  v-on(缩写是 @)  v-model  v-for  v-if  v-show</p><p style=\"text-align: left; text-indent: 2em;\">v-cloak ：可以解决 插值表达式闪烁问题；</p><p style=\"text-align: left; text-indent: 2em;\">v-text   ：默认 v-text 是没有闪烁问题的，v-text 会覆盖元素中原本的内容，但是  插值表达式  只会替换自己的这个占位符，不会把整个元素的内容清空</p><p style=\"text-align: left; text-indent: 2em;\">v-html  ：</p><p style=\"text-align: left; text-indent: 2em;\">v-bind  ：简写“：”，绑定属性，可以写合法的表达式</p><p style=\"text-align: left; text-indent: 2em;\">v-on    ：简写“@” ，绑定事件</p><p style=\"text-align: left;\"><br /></p><p style=\"text-align: left;\">4.事件修饰符   .stop  .prevent  .captrue  .self  .once</p><p style=\"text-align: left; text-indent: 2em;\">.stop：阻止冒泡</p><p style=\"text-align: left; text-indent: 2em;\">.prevent：阻止默认事件</p><p style=\"text-align: left; text-indent: 2em;\">.captrue：添加时间侦听器时使用事件捕获模式</p><p style=\"text-align: left; text-indent: 2em;\">.self：只当事件在该元素本身（比如不是子元素）触发时触发回调</p><p style=\"text-align: left; text-indent: 2em;\">.one：事件只触发一次</p><p style=\"text-align: left; text-indent: 2em;\">.stop和.self区别？</p><p style=\"text-align: left; text-indent: 2em;\"><span style=\"color: #C24F4A;\">.self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡行为</span></p><p style=\"text-align: left;\"><br /></p><p style=\"text-align: left;\">5.el ：指定眼控制的区域  data ：是个对象，指定了控制的区域内要用到的数据  methods 虽然带个后缀，但是是个对象，这里可以自定义了方法</p><p style=\"text-align: left;\">6.在vm实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法，必须带this</p><p style=\"text-align: left;\">7.在v-for 要会使用key 属性 （只接受 string / number）</p><p style=\"text-align: left;\">8.v-model 只能应用于表单元素</p><p style=\"text-align: left;\">9.在vue中绑定样式两种方式  v-bing：class  v-bind：style</p><p style=\"text-align: left;\">class：</p><p style=\"text-align: left; text-indent: 2em;\">1.第一种方式，直接传递一个数组，注意这里 class 需要使用  v-bind  做数据绑定</p><p style=\"text-align: left; text-indent: 2em;\">2.第二种方式，在数组中使用三元表达式，提高代码的可读性 例如： ：class=“[ 'aa','bb',flag?'cc':'' ]”   (flag是true或者false)</p><p style=\"text-align: left; text-indent: 2em;\">3.第三种方式，在数组中使用 对象来代替三元表达式，提高代码的可读性  例如：  ：class=“[ 'aa','bb',{‘cc’：flag } ]”</p><p style=\"text-align: left; text-indent: 2em;\">4.第四种方式，直接使用对象  例如： ：class=&quot;{‘aa’:flag,active&quot;:true}“</p><p style=\"text-align: left;\">style：</p><p style=\"text-align: left; text-indent: 2em;\">1.第一种方式，直接在元素上通过：style的形式，书写样式对象  ：style=“{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}”</p><p style=\"text-align: left; text-indent: 2em;\">2.第二种方式，将样式对象，定义到data中，并直接引入到：style中  ：style=“dataStyle”  dataStyle：{color：‘red’，‘font-sitze’：‘40px’，‘font-weight’：‘200’}</p><p style=\"text-align: left; text-indent: 2em;\">3.第三种方式，在：style中通过数组，引入多个data上的样式对象 ：style=“[dataStyle,dataStype2]”</p><p style=\"text-align: left;\">10.v-for</p><p style=\"text-align: left; text-indent: 2em;\">1.迭代数组</p><p style=\"text-align: left; text-indent: 2em;\">2.迭代对象中的属性</p><p style=\"text-align: left; text-indent: 2em;\">3.迭代数字</p><p style=\"text-align: left; text-indent: 2em;\"><span class=\"lake-fontsize-12\">v-if 和 v-show的区别？</span></p><p style=\"text-align: left; text-indent: 2em;\">v-if 的特点：每次都会重新删除或创建元素。</p><p style=\"text-align: left; text-indent: 2em;\">v-show  的特点：每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none 样式</p><p style=\"text-align: left; text-indent: 2em;\">应用场景：</p><p style=\"text-align: left; text-indent: 2em;\">如果元素涉及到频繁的切换，最好不要使用v-if，而是推荐使用 v-show;</p><p style=\"text-align: left; text-indent: 2em;\">如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if;</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-10-30T02:47:10.000Z",
    "deleted_at": null,
    "created_at": "2019-10-30T02:43:10.000Z",
    "updated_at": "2019-10-30T02:47:11.000Z",
    "published_at": "2019-10-30T02:47:10.000Z",
    "first_published_at": "2019-10-30T02:45:44.000Z",
    "word_count": 747,
    "cover": null,
    "description": "1.MVC和MVVM 的区别？2.学习了vue中最基本代码结构3.插值表达式  v-cloak  v-text  v-html  v-bind(缩写是 ： )  v-on(缩写是 @)  v-model  v-for  v-if  v-showv-cloak ：可以解决 插值表达式闪烁问题；v...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  }
]